// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: abc/v1/word.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WordService_CreateWord_FullMethodName        = "/api.abc.v1.WordService/CreateWord"
	WordService_UpdateWord_FullMethodName        = "/api.abc.v1.WordService/UpdateWord"
	WordService_DeleteWord_FullMethodName        = "/api.abc.v1.WordService/DeleteWord"
	WordService_GetWord_FullMethodName           = "/api.abc.v1.WordService/GetWord"
	WordService_ListWord_FullMethodName          = "/api.abc.v1.WordService/ListWord"
	WordService_GetAliyunNlsToken_FullMethodName = "/api.abc.v1.WordService/GetAliyunNlsToken"
)

// WordServiceClient is the client API for WordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordServiceClient interface {
	CreateWord(ctx context.Context, in *CreateWordRequest, opts ...grpc.CallOption) (*CreateWordReply, error)
	UpdateWord(ctx context.Context, in *UpdateWordRequest, opts ...grpc.CallOption) (*UpdateWordReply, error)
	DeleteWord(ctx context.Context, in *DeleteWordRequest, opts ...grpc.CallOption) (*DeleteWordReply, error)
	GetWord(ctx context.Context, in *GetWordRequest, opts ...grpc.CallOption) (*GetWordReply, error)
	ListWord(ctx context.Context, in *ListWordRequest, opts ...grpc.CallOption) (*ListWordReply, error)
	GetAliyunNlsToken(ctx context.Context, in *GetAliyunNlsTokenRequest, opts ...grpc.CallOption) (*GetAliyunNlsTokenReply, error)
}

type wordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordServiceClient(cc grpc.ClientConnInterface) WordServiceClient {
	return &wordServiceClient{cc}
}

func (c *wordServiceClient) CreateWord(ctx context.Context, in *CreateWordRequest, opts ...grpc.CallOption) (*CreateWordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWordReply)
	err := c.cc.Invoke(ctx, WordService_CreateWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordServiceClient) UpdateWord(ctx context.Context, in *UpdateWordRequest, opts ...grpc.CallOption) (*UpdateWordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWordReply)
	err := c.cc.Invoke(ctx, WordService_UpdateWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordServiceClient) DeleteWord(ctx context.Context, in *DeleteWordRequest, opts ...grpc.CallOption) (*DeleteWordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWordReply)
	err := c.cc.Invoke(ctx, WordService_DeleteWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordServiceClient) GetWord(ctx context.Context, in *GetWordRequest, opts ...grpc.CallOption) (*GetWordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWordReply)
	err := c.cc.Invoke(ctx, WordService_GetWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordServiceClient) ListWord(ctx context.Context, in *ListWordRequest, opts ...grpc.CallOption) (*ListWordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWordReply)
	err := c.cc.Invoke(ctx, WordService_ListWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordServiceClient) GetAliyunNlsToken(ctx context.Context, in *GetAliyunNlsTokenRequest, opts ...grpc.CallOption) (*GetAliyunNlsTokenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAliyunNlsTokenReply)
	err := c.cc.Invoke(ctx, WordService_GetAliyunNlsToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordServiceServer is the server API for WordService service.
// All implementations must embed UnimplementedWordServiceServer
// for forward compatibility.
type WordServiceServer interface {
	CreateWord(context.Context, *CreateWordRequest) (*CreateWordReply, error)
	UpdateWord(context.Context, *UpdateWordRequest) (*UpdateWordReply, error)
	DeleteWord(context.Context, *DeleteWordRequest) (*DeleteWordReply, error)
	GetWord(context.Context, *GetWordRequest) (*GetWordReply, error)
	ListWord(context.Context, *ListWordRequest) (*ListWordReply, error)
	GetAliyunNlsToken(context.Context, *GetAliyunNlsTokenRequest) (*GetAliyunNlsTokenReply, error)
	mustEmbedUnimplementedWordServiceServer()
}

// UnimplementedWordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWordServiceServer struct{}

func (UnimplementedWordServiceServer) CreateWord(context.Context, *CreateWordRequest) (*CreateWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWord not implemented")
}
func (UnimplementedWordServiceServer) UpdateWord(context.Context, *UpdateWordRequest) (*UpdateWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWord not implemented")
}
func (UnimplementedWordServiceServer) DeleteWord(context.Context, *DeleteWordRequest) (*DeleteWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWord not implemented")
}
func (UnimplementedWordServiceServer) GetWord(context.Context, *GetWordRequest) (*GetWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWord not implemented")
}
func (UnimplementedWordServiceServer) ListWord(context.Context, *ListWordRequest) (*ListWordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWord not implemented")
}
func (UnimplementedWordServiceServer) GetAliyunNlsToken(context.Context, *GetAliyunNlsTokenRequest) (*GetAliyunNlsTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAliyunNlsToken not implemented")
}
func (UnimplementedWordServiceServer) mustEmbedUnimplementedWordServiceServer() {}
func (UnimplementedWordServiceServer) testEmbeddedByValue()                     {}

// UnsafeWordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordServiceServer will
// result in compilation errors.
type UnsafeWordServiceServer interface {
	mustEmbedUnimplementedWordServiceServer()
}

func RegisterWordServiceServer(s grpc.ServiceRegistrar, srv WordServiceServer) {
	// If the following call pancis, it indicates UnimplementedWordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WordService_ServiceDesc, srv)
}

func _WordService_CreateWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).CreateWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordService_CreateWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).CreateWord(ctx, req.(*CreateWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordService_UpdateWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).UpdateWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordService_UpdateWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).UpdateWord(ctx, req.(*UpdateWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordService_DeleteWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).DeleteWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordService_DeleteWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).DeleteWord(ctx, req.(*DeleteWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordService_GetWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).GetWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordService_GetWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).GetWord(ctx, req.(*GetWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordService_ListWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).ListWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordService_ListWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).ListWord(ctx, req.(*ListWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordService_GetAliyunNlsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAliyunNlsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordServiceServer).GetAliyunNlsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WordService_GetAliyunNlsToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordServiceServer).GetAliyunNlsToken(ctx, req.(*GetAliyunNlsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WordService_ServiceDesc is the grpc.ServiceDesc for WordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.abc.v1.WordService",
	HandlerType: (*WordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWord",
			Handler:    _WordService_CreateWord_Handler,
		},
		{
			MethodName: "UpdateWord",
			Handler:    _WordService_UpdateWord_Handler,
		},
		{
			MethodName: "DeleteWord",
			Handler:    _WordService_DeleteWord_Handler,
		},
		{
			MethodName: "GetWord",
			Handler:    _WordService_GetWord_Handler,
		},
		{
			MethodName: "ListWord",
			Handler:    _WordService_ListWord_Handler,
		},
		{
			MethodName: "GetAliyunNlsToken",
			Handler:    _WordService_GetAliyunNlsToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abc/v1/word.proto",
}
